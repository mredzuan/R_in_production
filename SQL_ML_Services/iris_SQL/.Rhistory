Sys.info()
library(dplyr)
library(DBI)
.libPaths()
library(DBI)
library(odbc)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
#database = "sample_data",
host = "local")
DBI::dbWriteTable(SQL_con, "Iris", iris)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
DBI::dbWriteTable(SQL_con, "Iris", iris)
library(dplyr)
library(tidyverse)
tbl(SQL_con, "Iris")
tbl(SQL_con, "Iris") %>% summarise()
tbl(SQL_con, "Iris") %>% nrow()
tbl(SQL_con, "Iris") %>% tail()
tbl(SQL_con, "Iris") %>% head()
tbl(SQL_con, "Iris") %>% str()
tbl(SQL_con, "Iris") %>% glimpse()
library(RevoScaleR)
SQL_con_RVSCL <- RxSqlServerData(connectionString = "Driver=SQL Server;Server=REDZWINDOW\MSSQLWR;Database=exercises;Trusted_Connection={Yes}",
sqlQuery = "select * from Iris"
)
SQL_con_RVSCL <- RxSqlServerData(connectionString = "Driver=SQL Server;Server=REDZWINDOW\\MSSQLWR;Database=exercises;Trusted_Connection={Yes}",
sqlQuery = "select * from Iris"
)
SQL_con_RVSCL
Sys.getenv()
rxGetVarInfo(SQL_con_RVSCL)
rxSummary(~., SQL_con_RVSCL)
rxGetComputeContext()
rxGetComputeContext(sqlcompute)
sqlCompute <- RxInSqlServer(
connectionString = sqlConnString,
wait = sqlWait,
consoleOutput = sqlConsoleOutput)
sqlCompute <- RxInSqlServer(
connectionString = "Driver=SQL Server;Server=REDZWINDOW\\MSSQLWR;Database=exercises;Trusted_Connection={Yes}",
wait = sqlWait,
consoleOutput = sqlConsoleOutput)
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
sqlShareDir <- paste("c:\\demos\\", Sys.getenv("USERNAME"), sep = "")
sqlCompute <- RxInSqlServer(
connectionString = "Driver=SQL Server;Server=REDZWINDOW\\MSSQLWR;Database=exercises;Trusted_Connection={Yes}",
wait = sqlWait,
consoleOutput = sqlConsoleOutput)
rxGetComputeContext(sqlCompute)
sqlWait <- TRUE
sqlConsoleOutput <- FALSE
sqlShareDir <- paste("c:\\demos\\", Sys.getenv("USERNAME"), sep = "")
sqlCompute <- RxInSqlServer(
connectionString = "Driver=SQL Server;Server=REDZWINDOW\\MSSQLWR;Database=exercises;Trusted_Connection={Yes}",
wait = sqlWait,
consoleOutput = sqlConsoleOutput)
rxGetComputeContext(sqlCompute)
rxGetComputeContext()
proc.time()
proc.time
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
#Dataset
data_iris <- iris
set.seed(123)
train_index <- createDataPartition(data_iris$Species, p = 0.8, list = FALSE)
train_dataset <- data_iris[train_index, ]
test_dataset <- data_iris[-train_index, ]
classifier_RF <- randomForest(x = train_dataset[, -5],
y = train_dataset$Species)
predict_iris <- predict(classifier_RF, newdata = test_dataset[, -5])
predict_iris
#confusion matrix for test dataset
confusionMatrix(predict_iris, test_dataset$Species)
test_dataset
head(test_dataset[-5])
modelBin <- serialize(classifier_RF, NULL)
modelBin
modelBinStr <- paste(modelBin, collapse = "")
modelBinStr
model_data <- data.frame(id = 1, value = modelBinStr)
model_data
View(model_data)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
DBI::dbWriteTable(SQL_con, "iris_models", model_data)
DBI::dbWriteTable(SQL_con, "iris_models", model_data, append = TRUE)
predict_iris
data.frame(predict_iris)
predicted_res_df <- cbind(test_dataset[, -5], data.frame(predict_iris))
View(predicted_res_df)
names(predicted_res_df)
.libPaths()
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
.libPaths()
install.packages("R6")
#modelBinStr <- paste(modelBin, collapse = "")
modelBinStr <- as.raw(modelBin)
#modelBinStr <- paste(modelBin, collapse = "")
modelBinStr <- data.frame(payload = as.raw(modelBin))
View(modelBinStr)
modelBin <- serialize(classifier_RF, NULL)
unserialize(modelBin)
install.packages(c("caret", "dplyr", "tidyverse"))
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
DBI::dbWriteTable(SQL_con, "Iris", iris)
SQL_con_RVSCL <- RxSqlServerData(connectionString = "Driver=SQL Server;Server=REDZWINDOW\\MSSQLWR;Database=exercises;Trusted_Connection={Yes}",
sqlQuery = "select * from Iris"
)
rxGetVarInfo(SQL_con_RVSCL)
#Dell local host
SQL_con_RVSCL <- RxSqlServerData(connectionString = "Driver=SQL Server;Server=DESKTOP-SKVB2GF;Database=exercises;Trusted_Connection={Yes}",
sqlQuery = "select * from Iris"
)
rxGetVarInfo(SQL_con_RVSCL)
rxSummary(~., SQL_con_RVSCL)
#Dataset
data_iris <- iris
set.seed(123)
train_index <- createDataPartition(data_iris$Species, p = 0.8, list = FALSE)
train_dataset <- data_iris[train_index, ]
test_dataset <- data_iris[-train_index, ]
classifier_RF <- randomForest(x = train_dataset[, -5],
y = train_dataset$Species)
predict_iris <- predict(classifier_RF, newdata = test_dataset[, -5])
predicted_res_df <- cbind(test_dataset[, -5], data.frame(predict_iris))
View(predicted_res_df)
#confusion matrix for test dataset
confusionMatrix(predict_iris, test_dataset$Species)
library(e1071)
install.packages("e1071")
library(e1071)
#confusion matrix for test dataset
confusionMatrix(predict_iris, test_dataset$Species)
modelBin <- serialize(classifier_RF, NULL)
#modelBinStr <- paste(modelBin, collapse = "")
modelBinStr <- data.frame(payload = as.raw(modelBin))
View(modelBinStr)
model_data <- data.frame(id = 1, value = modelBinStr)
View(model_data)
DBI::dbWriteTable(SQL_con, "iris_models", model_data, append = TRUE)
model_data <- data.frame(id = 1, value = "TestJe")
DBI::dbWriteTable(SQL_con, "iris_models", model_data, append = TRUE)
model_data <- data.frame(id = 1, value = modelBinStr)
.libPaths()
install.packages("rlang")
View(model_data)
library(odbc)
SQL_con <- dbConnect(odbc::odbc(), dsn = "sql_wR", driver = "SQL Server Native Client 11.0",
database = "exercises", host = "local")
iris_model
iris_models
as.raw(iris)
View(predicted_res_df)
predict_iris <- predict(classifier_RF, newdata = test_dataset[, -5])
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
predict_iris <- predict(classifier_RF, newdata = test_dataset[, -5])
predict_iris2 <- data.frame(predict(classifier_RF, newdata = test_dataset[, -5]))
View(predict_iris2)
names(predict_iris2)[1]
names(predict_iris2)[1] <- "predict_iris"
View(predict_iris2)
predict_iris2 <- data.frame(predict_iris = predict(classifier_RF, newdata = test_dataset[, -5]))
View(predict_iris2)
predict_iris <- predict(classifier_RF, newdata = test_dataset[, -5])
predicted_res_df <- cbind(test_dataset[, -5], data.frame(predict_iris))
View(predicted_res_df)
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
install.packages("RevoscaleR")
.libPaths()
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(caret)
library(randomForest)
library(e1071)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
tbl(SQL_con, "Iris") %>% glimpse()
#Dataset
data_iris <- iris
set.seed(123)
train_index <- createDataPartition(data_iris$Species, p = 0.8, list = FALSE)
train_dataset <- data_iris[train_index, ]
test_dataset <- data_iris[-train_index, ]
classifier_RF <- randomForest(x = train_dataset[, -5],
y = train_dataset$Species)
predict_iris <- predict(classifier_RF, newdata = test_dataset[, -5])
predicted_res_df <- cbind(test_dataset[, -5], data.frame(predict_iris))
predict_iris2 <- data.frame(predict_iris = predict(classifier_RF, newdata = test_dataset[, -5]))
#confusion matrix for test dataset
confusionMatrix(predict_iris, test_dataset$Species)
modelBin <- serialize(classifier_RF, NULL)
#modelBinStr <- paste(modelBin, collapse = "")
modelBinStr <- data.frame(payload = as.raw(modelBin))
View(modelBinStr)
model_data <- data.frame(id = 1, value = modelBinStr)
View(model_data)
DBI::dbWriteTable(SQL_con, "iris_models", model_data, append = TRUE)
DBI::dbWriteTable(SQL_con, "iris_models", model_data, append = TRUE)
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
#library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
DBI::dbWriteTable(SQL_con, "Iris", iris)
tbl(SQL_con, "Iris") %>% glimpse()
update.packages(ask = FALSE, checkBuilt = TRUE)
warning()
warnings()
warnings()
warnings()
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
#library(RevoScaleR)
library(caret)
library(abind)
detach("package:abind", unload = TRUE)
remove.packages("dplyr", lib="~/R/win-library/3.5")
remove.packages("tidyverse", lib="C:/Program Files/Microsoft SQL Server/MSSQL15.MSSQLSERVER/R_SERVICES/library")
library(dplyr)
remove.packages("caret", lib="~/R/win-library/3.5")
remove.packages("caret", lib="C:/Program Files/Microsoft SQL Server/MSSQL15.MSSQLSERVER/R_SERVICES/library")
remove.packages("caret", lib="C:/Program Files/Microsoft SQL Server/MSSQL15.MSSQLSERVER/R_SERVICES/library")
remove.packages("caret", lib="C:/Program Files/Microsoft SQL Server/MSSQL15.MSSQLSERVER/R_SERVICES/library")
#library(RevoScaleR)
library(caret)
remove.packages("ggplot2", lib="~/R/win-library/3.5")
install.packages("dplyr")
install.packages("dplyr")
Sys.info()
version
library(ggplot2)
install.packages("pillar")
version
library(dplyr)
library(dplyr)
.libPaths()
library(dplyr)
library(tidyverse)
#library(tidyverse)
#library(RevoScaleR)
library(caret)
install.packages("recipes")
#library(tidyverse)
#library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
library(odbc)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
tbl(SQL_con, "Iris") %>% glimpse()
library(dplyr)
tbl(SQL_con, "Iris") %>% glimpse()
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("broom")
install.packages("broom")
library(tidyverse)
install.packages("broom")
library(tidyverse)
install.packages("dbplyr")
library(tidyverse)
install.packages("modelr")
library(tidyverse)
tbl(SQL_con, "Iris") %>% glimpse()
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
#library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
tbl(SQL_con, "Iris") %>% glimpse()
#Dataset
data_iris <- iris
set.seed(123)
train_index <- createDataPartition(data_iris$Species, p = 0.8, list = FALSE)
train_dataset <- data_iris[train_index, ]
test_dataset <- data_iris[-train_index, ]
classifier_RF <- randomForest(x = train_dataset[, -5],
y = train_dataset$Species)
#predict the test dataset
predict_iris <- predict(classifier_RF, newdata = test_dataset[, -5])
predicted_res_df <- cbind(test_dataset[, -5], data.frame(predict_iris))
View(predicted_res_df)
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
#library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
