data_sample <-  iris
library(caret)
library(e1071)
set.seed(200)
train_index <- createDataPartition(data_sample$Species, p = 0.8, list = FALSE)
train_dataset <- data_sample[train_index, ]
#Dataset
data_iris <-  iris
train_index <- createDataPartition(data_iris$Species, p = 0.8, list = FALSE)
train_dataset <- data_iris[train_index, ]
test_dataset <- data_iris[-train_index, ]
View(data_iris)
classifier_SVM <- svm(Species ~ .,
data = train_dataset)
classifier_SVM
y_pred <- predict(classifier_SVM, newdata = test_dataset[-5])
predict_iris <- predict(classifier_SVM, newdata = test_dataset[-5])
#Confusion matrix for predict result from test dataset
confusionMatrix(predict_iris, test_dataset[, 5])
View(classifier_SVM)
View(train_dataset)
View(test_dataset)
predict_iris
data.frame(predict_iris)
pairs(data_iris[, 1:4], col = data_sample$Species)
data(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[codes(iris$Species)])
par(xpd=TRUE)
legend(0, 1, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
pairs(data_iris[, 1:4], col = data_sample$Species)
legend(0, 1, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
data(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[codes(iris$Species)])
par(xpd=TRUE)
legend(0, 1, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
cl <- kmeans(iris[1:4],3)
idx <- subset(expand.grid(x=1:4,y=1:4),x!=y)
i <- 1
pairs(iris[1:4],bg=cl$cluster,pch=21,
panel=function(x, y,bg, ...) {
points(x, y, pch=21,bg=bg)
points(cl$center[,idx[i,'x']],cl$center[,idx[i,'y']],
cex=4,pch=10,col='blue')
i <<- i +1
})
data(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[codes(iris$Species)])
par(xpd=TRUE)
legend(0, 1, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
pairs(data_iris[, 1:4], col = data_sample$Species)
data(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[codes(iris$Species)])
par(xpd=TRUE)
legend(0, 1, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
data(iris)
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[codes(iris$Species)])
par(xpd=TRUE)
legend(0, 1, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
cl <- kmeans(iris[1:4],3)
idx <- subset(expand.grid(x=1:4,y=1:4),x!=y)
i <- 1
pairs(iris[1:4],bg=cl$cluster,pch=21,
panel=function(x, y,bg, ...) {
points(x, y, pch=21,bg=bg)
points(cl$center[,idx[i,'x']],cl$center[,idx[i,'y']],
cex=4,pch=10,col='blue')
i <<- i +1
})
pairs(iris[1:4], main = "Anderson's Iris Data -- 3 species",
pch = 21, bg = c("red", "green3", "blue")[codes(iris$Species)])
par(xpd=TRUE)
legend(0, 1, as.vector(unique(iris$Species)),
fill=c("red", "green3", "blue"))
pairs(data_iris[, 1:4], col = data_sample$Species)
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(1,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.85,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.95,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.95,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.95,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
legend(0.90,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
pairs(iris[,1:4],col=iris[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(iris$Species)),fill=c(1,2,3))
test_dataset[-5]
typeof(test_dataset[-5])
class(test_dataset[-5])
#Predict only 1 sample
predict_1sample <- predict(classifier_SVM, newdata = data.frame(Sepal.Length = 4, Sepal.Width = 2, Petal.Length = 4, Petal.Width = 4))
predict_1sample
1sample <- sas
nly_1Sample <- data.frame(Sepal.Length = 4, Sepal.Width = 2, Petal.Length = 4, Petal.Width = 4)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
only_1Sample <- data.frame(Sepal.Length = 4, Sepal.Width = 2, Petal.Length = 4, Petal.Width = 4)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
names(iris)
only_1Sample
only_1Sample_update <- cbind(only_1Sample, predict_1sample)
only_1Sample_update
only_1Sample_update <- cbind(only_1Sample, Species = predict_1sample)
only_1Sample_update
only_1Sample_update <- cbind(only_1Sample, Species = paste(predict_1sample, " (Predicted)", sep = ""))
only_1Sample_update
data_irisUpdate <- rbind(data_iris, only_1Sample_update)
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_iris$Species)),fill=c(1,2,3))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_iris$Species)),fill=c(1,2,3))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3))
only_1Sample <- data.frame(Sepal.Length = 4, Sepal.Width = 3.5, Petal.Length = 4, Petal.Width = 3)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
only_1Sample_update <- cbind(only_1Sample, Species = paste(predict_1sample, " (Predicted)", sep = ""))
data_irisUpdate <- rbind(data_iris, only_1Sample_update)
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3))
only_1Sample <- data.frame(Sepal.Length = 4, Sepal.Width = 3.5, Petal.Length = 4, Petal.Width = 3)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
only_1Sample_update <- cbind(only_1Sample, Species = paste(predict_1sample, " (Predicted)", sep = ""))
data_irisUpdate <- rbind(data_iris, only_1Sample_update)
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3))
only_1Sample <- data.frame(Sepal.Length = 4, Sepal.Width = 3.5, Petal.Length = 4, Petal.Width = 3)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
only_1Sample_update <- cbind(only_1Sample, Species = paste(predict_1sample, " (Predicted)", sep = ""))
data_irisUpdate <- rbind(data_iris, only_1Sample_update)
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
pairs(iris[1:4],
main = "Edgar Anderson's Iris Data",
labels=NULL,
lower.panel=panel.pearson,
xaxt='n',
yaxt='n',
pch = 21,
bg = c("red", "green3", "blue")[unclass(iris$Species)]
)
panel.pearson <- function(x, y, ...) {
horizontal <- (par("usr")[1] + par("usr")[2]) / 2;
vertical <- (par("usr")[3] + par("usr")[4]) / 2;
text(horizontal, vertical, format(abs(cor(x,y)), digits=2)) }
pairs(iris[1:4],
main = "Edgar Anderson's Iris Data",
labels=NULL,
lower.panel=panel.pearson,
xaxt='n',
yaxt='n',
pch = 21,
bg = c("red", "green3", "blue")[unclass(iris$Species)])
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
bg = c("red", "green3", "blue")[unclass(iris$Species)]
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
bg = c("red", "green3", "blue")[unclass(iris$Species)]
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
only_1Sample_update
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
text(x = only_1Sample_update$Species)
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
text(x = only_1Sample_update$Species)
predict_1sample
redict only 1 sample
only_1Sample <- data.frame(Sepal.Length = 1, Sepal.Width = 1, Petal.Length = 1, Petal.Width = 1)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
only_1Sample_update <- cbind(only_1Sample, Species = paste(predict_1sample, " (Predicted)", sep = ""))
data_irisUpdate <- rbind(data_iris, only_1Sample_update)
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
only_1Sample <- data.frame(Sepal.Length = 1, Sepal.Width = 1, Petal.Length = 1, Petal.Width = 1)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
only_1Sample_update <- cbind(only_1Sample, Species = paste(predict_1sample, " (Predicted)", sep = ""))
data_irisUpdate <- rbind(data_iris, only_1Sample_update)
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
#Plotting scatter plot matrix
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
featurePlot(x = data_irisUpdate[,1:4], y = data_irisUpdate[,5], plot = "ellipse")
featurePlot(x = data_irisUpdate[,1:4], y = data_irisUpdate[,5], plot = "ellipse")
dataset <- iris
dataset <- iris
x <- dataset[,1:4]
y <- dataset[,5]
featurePlot(x=x, y=y, plot="ellipse")
install.packages("ellipse")
dataset <- iris
x <- dataset[,1:4]
y <- dataset[,5]
featurePlot(x=x, y=y, plot="ellipse")
featurePlot(x = data_irisUpdate[,1:4], y = data_irisUpdate[,5], plot = "ellipse")
featurePlot(x = data_irisUpdate[-151 ,1:4], y = data_irisUpdate[-151,5], plot = "ellipse")
featurePlot(iris[, 1:4], iris$Species, plot="pairs",
auto.key = list(columns = 2))
col.whitebg()
featurePlot(iris[, 1:4], iris$Species, plot="pairs",
auto.key = list(columns = 2))
featurePlot(iris[, 1:4], iris$Species, plot="pairs",
auto.key = list(columns = 2))
col.whitebg()
featurePlot(iris[, 1:4], iris$Species, plot="pairs",
auto.key = list(columns = 2))
col.whitebg()
featurePlot(iris[, 1:4], iris$Species, plot="pairs",
auto.key = list(columns = 2))
featurePlot(x = data_irisUpdate[ ,1:4], y = data_irisUpdate[,5])
featurePlot(x = data_irisUpdate[ ,1:4], y = data_irisUpdate[,5], plot = "pairs")
featurePlot(x = data_irisUpdate[ ,1:4], y = data_irisUpdate[,5], plot = "pairs", auto.key = list(columns = 2))
featurePlot(x = data_irisUpdate[-151 ,1:4], y = data_irisUpdate[-151,5], plot = "ellipse")
featurePlot(x = data_irisUpdate[-151 ,1:4], y = data_irisUpdate[-151,5], plot = "ellipse", auto.key = list(columns = 2))
?auto.key
featurePlot(x = data_irisUpdate[-151 ,1:4], y = data_irisUpdate[-151,5], plot = "ellipse", auto.key = list(columns = 2))
featurePlot(x = data_irisUpdate[ ,1:4], y = data_irisUpdate[ ,5], plot = "ellipse", auto.key = list(columns = 2))
featurePlot(x = data_irisUpdate[-151 ,1:4], y = data_irisUpdate[-151,5], plot = "ellipse", auto.key = list(columns = 2))
featurePlot(x = data_irisUpdate[-151 ,1:4], y = data_irisUpdate[-151,5], plot = "ellipse", auto.key = list(columns = 3))
featurePlot(x = data_irisUpdate[-151 ,1:4], y = data_irisUpdate[-151,5], plot = "ellipse", auto.key = list(columns = 3))
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
saveRDS(classifier_SVM, "Iris_Model/Iris_SVM_model.RDS")
library(caret)
library(e1071)
#Dataset
data_iris <-  iris
#Splitting data to test and training dataset
set.seed(200)
train_index <- createDataPartition(data_iris$Species, p = 0.8, list = FALSE)
train_dataset <- data_iris[train_index, ]
test_dataset <- data_iris[-train_index, ]
#Fit train dataset to RF algorithm
classifier_SVM <- svm(Species ~ .,
data = train_dataset)
#saveRDS(classifier_SVM, "Iris_Model/Iris_SVM_model.RDS")
#Predict test result
predict_iris <- predict(classifier_SVM, newdata = test_dataset[-5])
only_1Sample <- data.frame(Sepal.Length = 1, Sepal.Width = 1, Petal.Length = 1, Petal.Width = 1)
predict_1sample <- predict(classifier_SVM, newdata = only_1Sample)
only_1Sample_update <- cbind(only_1Sample, Species = paste(predict_1sample, " (Predicted)", sep = ""))
data_irisUpdate <- rbind(data_iris, only_1Sample_update)
#Confusion matrix for predict result from test dataset
confusionMatrix(predict_iris, test_dataset[, 5])
pairs(data_irisUpdate[,1:4],col=data_irisUpdate[,5],oma=c(4,4,6,12))
par(xpd=TRUE)
legend(0.90,0.6, as.vector(unique(data_irisUpdate$Species)),fill=c(1,2,3,4))
shiny::runApp('App/Iris_predict')
runApp('App/Iris_predict')
iris
data_iris <- iris
names(iris)
runApp('App/Iris_predict')
plot(mtcars)
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
tag
tags
runApp('App/Iris_predict')
runApp('App/Iris_predict')
getwd()
runApp('App/Iris_predict')
runApp('App/Iris_predict')
getwd()
setwd("D:/GoogleDrive/Personal/Exercise/R_in_production/Shiny/Iris_shiny/App/Iris_predict")
runApp()
runApp()
shiny::runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp()
runApp('App/Iris_predict')
getwd()
runApp('App/Iris_predict')
setwd("D:/Google_Drive2/Personal/Exercise/R_in_production/Shiny/Iris_shiny/App/Iris_predict")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(display.mode = "showcase")
options(shiny.reactlog = T)
runApp()
runApp()
options(shiny.fullstacktrace = TRUE)
runApp()
runApp()
runApp()
runApp()
shiny::runApp('App/Iris_predict')
library(waiter)
install.packages("waiter")
library(waiter)
library(shiny)
library(caret)
library(e1071)
library(waiter)
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
waiter_hide
waiter
?waiter
use_waiter
shiny::runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
?renderImage
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
?imageOutput
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
runApp('App/Iris_predict')
options(shiny.reactlog = T)
runApp('App/Iris_predict')
getwd()
setwd("D:/Google_Drive2/Personal/Exercise/R_in_production/Shiny/Iris_shiny/App/Iris_predict")
runApp()
runApp()
runApp()
shiny::runApp('App/Iris_predict')
