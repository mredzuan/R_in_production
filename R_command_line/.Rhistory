4.7,
1.4)
predict_iris_fun(5.1, 3.5, 1.4, dss)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- predict(iris_model, newdata = new_data)
return(predict_new_data)
}
predict_iris_fun(5.1, 3.5, 1.4, dss)
predict_iris_fun(5.1, 3.5, 1.4, "ss")
predict_iris_fun(5.1, 3.5, 1.4, dss)
petal_width = 2
predict_iris_fun()
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- predict(iris_model, newdata = new_data)
browser()
return(predict_new_data)
}
predict_iris_fun(1, 0.3, 2.3, 2)
predict_new_data
iris_model
library(randomForest)
library(caret)
source("R_script/Iris_predict_fun.R")
predict_iris_fun(1,2,3,4)
predict_iris_fun(1,2,3,"sasa")
Sys.getpid()
Sys.getpid()
Sys.getpid()
data <- predict_iris_fun(1,2,3,4)
data
source('D:/Google_Drive2/Personal/Note For Self Learning 2/Programming/R_in_production/R_script/Iris_predict_fun.R')
data <- predict_iris_fun(1,2,3,4)
source('D:/Google_Drive2/Personal/Note For Self Learning 2/Programming/R_in_production/R_script/Iris_predict_fun.R')
data <- predict_iris_fun(1,2,3,4)
Sys.time()
paste0(Sys.getpid(), Sys.time(), collapse = "-")
paste(Sys.getpid(), Sys.time(), sep = "-")
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- as.data.frame(Id = predict_id, predict_result = predict_new_data)
return(predict_df)
}
test <- predict_iris_fun(1,2,3,4)
(Sys.getpid(), Sys.time(), sep = "-")
paste(Sys.getpid(), Sys.time(), sep = "-")
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
browser()
predict_df <- as.data.frame(Id = predict_id, predict_result = predict_new_data)
return(predict_df)
}
test <- predict_iris_fun(1,2,3,4)
as.data.frame()
?as.data.frame
data.frame(1,2)
data.frame(no = 1, pass = 2)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
browser()
predict_df <- data.frame(Id = predict_id, predict_result = predict_new_data)
return(predict_df)
}
predict_iris_fun(1,2,3)
predict_iris_fun(1,2,3,5)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- data.frame(Id = predict_id, predict_result = predict_new_data)
return(predict_df)
}
test_df <- data.frame(x = 1, y =2, z = 6)
tets_df
test_df
cbind(test_df)
as.character(test_df)
library(jsonlite)
toJSON(test_df)
library(jsonlite)
testjason <- toJSON(test_df)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
new_data_Json <- toJSON(new_data)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- data.frame(Id = predict_id, input_param = new_data_Json, predict_result = predict_new_data)
return(predict_df)
}
predict_iris_fun(1,2,3,4)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
new_data_Json <- toJSON(new_data)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- data.frame(Id = predict_id,
input_param = as.character(new_data_Json),
predict_result = predict_new_data)
return(predict_df)
}
predict_iris_fun(1,2,3,4)
testResult <- predict_iris_fun(1,2,3,4)
View(testResult)
library(RSQLite)
library(DBI)
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
View(testResult)
DBI::dbWriteTable(con, "irisPrediction", testResult)
dbListTables(con)
library(dplyr)
library(tidyverse)
table(con,  "irisPrediction")
table(con, "irisPrediction")
tbl(con, "irisPrediction")
dbDisconnect(con)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
new_data_Json <- toJSON(new_data)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- data.frame(Id = predict_id,
input_param = as.character(new_data_Json),
predict_result = predict_new_data)
#write result to DB
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
DBI::dbWriteTable(con, "irisPrediction", predict_df)
dbDisconnect(con)
return(predict_df)
}
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
new_data_Json <- toJSON(new_data)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- data.frame(Id = predict_id,
input_param = as.character(new_data_Json),
predict_result = predict_new_data)
#write result to DB
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
DBI::dbWriteTable(con, "irisPrediction", predict_df)
dbDisconnect(con)
return(predict_df)
}
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction")
predict_iris_fun(1,2,3)
predict_iris_fun(1,2,3,4)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
new_data_Json <- toJSON(new_data)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- data.frame(Id = predict_id,
input_param = as.character(new_data_Json),
predict_result = predict_new_data)
#write result to DB
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
DBI::dbWriteTable(con, "irisPrediction", predict_df, append = TRUE)
dbDisconnect(con)
return(predict_df)
}
predict_iris_fun(1,2,3,4)
tbl(con, "irisPrediction")
predict_iris_fun(1,1,2,3)
tbl(con, "irisPrediction")
source('D:/Google_Drive2/Personal/Note For Self Learning 2/Programming/R_in_production/R_script/Iris_predict_fun.R')
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction")
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
tbl(con, "irisPrediction")
Sys.getpid()
getwd()
tbl(con, "irisPrediction")
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction")
tbl(con, "irisPrediction")
tbl(con, "irisPrediction")
predict_iris_fun(2,2,3,4)
tbl(con, "irisPrediction")
tbl(con, "irisPrediction")
tbl(con, "irisPrediction")
tbl(con, "irisPrediction")
suppressPackageStartupMessages(library(randomForest))
library(randomForest)
library(jsonlite)
tbl(con, "irisPrediction")
tbl(con, "irisPrediction")
tbl(con, "irisPrediction") %>% collect()
tbl(con, "irisPrediction") %>% collect()
tbl(con, "irisPrediction") %>% collect()
tbl(con, "irisPrediction") %>% collect()
tbl(con, "irisPrediction") %>% collect()
tbl(con, "irisPrediction")
tbl(con, "irisPrediction") %>% collect()
tbl(con, "irisPrediction") %>% collect() %>% tail()
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
getwd()
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
getwd()
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
system.time()
Sys.time()
paste("Run time: ", Sys.time())
sink(file = "log_file/R_Console_msg.log")
sink(file = paste("log_file/", Sys.time(), "R_console_Msg.log", sep = ""))
sink(file = paste("log_file/", format(Sys.time(), "%Y%m%d_%H%M"), "R_console_Msg.log", sep = ""))
sink("sink-examp.txt")
i <- 1:10
outer(i, i, "*")
sink()
print(paste("-----Run time: ", Sys.time(), " by: ", Sys.getpid() ," --------"))
(print(paste("-----Run time: ", Sys.time(), " by: ", Sys.getpid() ," --------")))
session_id <- (paste("-----Run time: ", Sys.time(), " by: ", Sys.getpid() ," --------"))
print(session_id)
session_id
view(session_id)
view(session_id)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
dbListTables(con)
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
#DBI::dbWriteTable(con, "irisPrediction", testResult)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(randomForest)
library(caret)
library(jsonlite)
library(DBI)
library(RSQLite)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
new_data_Json <- toJSON(new_data)
predict_iris_fun <- function(sepal_length, sepal_width, petal_length, petal_width){
stopifnot(is.numeric(sepal_length) & is.numeric(sepal_width) & is.numeric(petal_length) & is.numeric(petal_width))
new_data = data.frame(Sepal.Length = sepal_length,
Sepal.Width = sepal_width,
Petal.Length = petal_length,
Petal.Width = petal_width)
new_data_Json <- toJSON(new_data)
iris_model <- readRDS(file = "ML_model/iris_RF_Model.RDS")
predict_new_data <- as.character(predict(iris_model, newdata = new_data))
predict_id <- paste(Sys.getpid(), Sys.time(), sep = "-")
predict_df <- data.frame(Id = predict_id,
input_param = as.character(new_data_Json),
predict_result = predict_new_data)
#write result to DB
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
DBI::dbWriteTable(con, "irisPrediction", predict_df, append = TRUE)
dbDisconnect(con)
return(predict_df)
}
predict_iris_fun(1,1,2,3)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
session_id <- (paste("-----Run time: ", Sys.time(), " by: ", Sys.getpid() ," --------"))
print(session_id)
sink(file = paste("log_file/", format(Sys.time(), "%Y%m%d_%H%M"), "_R_console_Msg.log", sep = ""), append = TRUE)
?sink
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
dbDisconnect(con)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
plumber::plumb(file='D:/Google_Drive2/Personal/Exercise/R_in_production/R_Plumber/iris_plumber/plumber.R')$run()
shiny::runApp('D:/Google_Drive2/Personal/Exercise/R_in_production/Shiny/Iris_shiny/App/Iris_predict')
options(shiny.reactlog = T)
runApp('D:/Google_Drive2/Personal/Exercise/R_in_production/Shiny/Iris_shiny/App/Iris_predict')
Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
DBI::dbWriteTable(SQL_con, "Iris", iris)
tbl(SQL_con, "Iris") %>% glimpse()
#lenovo
SQL_con_RVSCL <- RxSqlServerData(connectionString = "Driver=SQL Server;Server=REDZWINDOW\\MSSQLWR;Database=exercises;Trusted_Connection={Yes}",
sqlQuery = "select * from Iris"
)
library(RevoScaleR)
install.packages("RevoScaleR")
library(RevoScaleR)
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
install.packages("R6")
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
SQL_con <- dbConnect(odbc::odbc(),
dsn = "sql_wR",
driver = "SQL Server Native Client 11.0",
database = "exercises",
host = "local")
tbl(SQL_con, "Iris") %>% glimpse()
library(dplyr)
?install.packages
.libPaths()
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(tidyverse)
library(RevoScaleR)
library(caret)
library(randomForest)
library(e1071)
# Load library ------------------------
library(DBI)\
# Load library ------------------------
library(DBI)
library(odbc)
library(dplyr)
library(RSQLite)
library(DBI)
library(dplyr)
library(tidyverse)
con <- dbConnect(RSQLite::SQLite(), "DB/tempDB.db")
dbListTables(con)
tbl(con, "irisPrediction") %>% collect() %>% tail(10)
plumber::plumb(file='D:/Google_Drive2/Personal/Exercise/R_in_production/R_Plumber/iris_plumber/plumber.R')$run()
shiny::runApp('D:/Google_Drive2/Personal/Exercise/R_in_production/Shiny/Iris_shiny/App/Iris_predict')
